#!/usr/bin/env ruby

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.

require 'optparse'
require 'yaml'
require 'apipie-bindings'
require 'highline/import'

@defaults = {
  :noop       => false,
  :keep       => 5,
  :uri        => 'https://localhost/',
  :timeout    => 300,
  :user       => 'admin',
  :pass       => nil,
  :org        => 1,
  :lifecycle  => 1,
}

@options = {
  :yamlfile  => 'cvmanager.yaml',
}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{opts.program_name} ACTION [options]"
  opts.version = "0.1"
  
  opts.separator ""
  opts.separator "#{opts.summary_indent}ACTION can be any of [clean,update,promote]"
  opts.separator ""

  opts.on("-U", "--uri=URI", "URI to the Satellite") do |u|
    @options[:uri] = u
  end
  opts.on("-t", "--timeout=TIMEOUT", "Timeout value in seconds for any API calls. -1 means never timeout") do |t|
    @options[:timeout] = t
  end
  opts.on("-u", "--user=USER", "User to log in to Satellite") do |u|
    @options[:user] = u
  end
  opts.on("-p", "--pass=PASS", "Password to log in to Satellite") do |p|
    @options[:pass] = p
  end
  opts.on("-o", "--organization-id=ID", "ID of the Organization to clean up") do |o|
    @options[:org] = o
  end
  opts.on("-k", "--keep=NUM", "how many unused versions should be kept") do |k|
    @options[:keep] = k
  end
  opts.on("-c", "--config=FILE", "configuration in YAML format") do |c|
    @options[:yamlfile] = c
  end
  opts.on("-l", "--to-lifecycle-environemnt=ID", OptionParser::DecimalInteger, "which LE should the promote be done to") do |l|
    @options[:lifecycle] = l
  end
  opts.on("-n", "--noop", "do not actually execute anything") do
    @options[:noop] = true
  end
end
optparse.parse!

if ARGV.empty?
  puts optparse.help
  exit
end

@yaml = YAML.load_file(@options[:yamlfile])

if @yaml.has_key?(:settings) and @yaml[:settings].is_a?(Hash)
  @yaml[:settings].each do |key,val|
    if not @options.has_key?(key)
      @options[key] = val
    end
  end
end

@defaults.each do |key,val|
  if not @options.has_key?(key)
    @options[key] = val
  end
end

if not @options[:user]
  @options[:user] = ask('Satellite username: ')
end

if not @options[:pass]
  @options[:pass] = ask('Satellite password: ') { |q| q.echo = false }
end

@options[:keep] = @options[:keep].to_i

def clean()
  api = ApipieBindings::API.new({:uri => @options[:uri], :username => @options[:user], :password => @options[:pass], :api_version => '2', :timeout => @options[:timeout]})

  cvs = []
  req = api.resource(:content_views).call(:index, {:organization_id => @options[:org], :full_results => true})
  cvs.concat(req['results'])
  while (req['results'].length == req['per_page'].to_i)
    req = api.resource(:content_views).call(:index, {:organization_id => @options[:org], :full_results => true, :per_page => req['per_page'], :page => req['page'].to_i+1})
    cvs.concat(req['results'])
  end

  cvs.each do |cv|
    keep = []
    puts cv['name']
    cv['versions'].sort_by { |v| v['version'].to_f }.reverse.each do |version|
      next if not version['environment_ids'].empty?
      version_details = api.resource(:content_view_versions).call(:show, {:id => version['id']})
      next if not version_details['composite_content_view_ids'].empty?
      if keep.length < @options[:keep]
        keep.push(version)
        puts "keeping #{version['version']}"
      else
        puts "removing #{version['version']}"
        if not @options[:noop]
          api.resource(:content_view_versions).call(:destroy, {:id => version['id']})
        else
          puts "[noop] would delete content view version with id #{version['id']}"
        end
      end
    end
  end
end

def update()
  api = ApipieBindings::API.new({:uri => @options[:uri], :username => @options[:user], :password => @options[:pass], :api_version => '2', :timeout => @options[:timeout]})

  ccvs = []
  req = api.resource(:content_views).call(:index, {:organization_id => @options[:org], :full_results => true})
  ccvs.concat(req['results'])
  while (req['results'].length == req['per_page'].to_i)
    req = api.resource(:content_views).call(:index, {:organization_id => @options[:org], :full_results => true, :per_page => req['per_page'], :page => req['page'].to_i+1})
    ccvs.concat(req['results'])
  end

  ccvs.each do |ccv|
    next if ! ccv['composite']

    was_updated = false

    puts ccv['name']

    # loop through the components and check if they are uptodate
    ids = Array.new(ccv['component_ids'])
    ccv['components'].each do |component|
      puts " Checking #{component['content_view']['name']}"

      # get the desired version for this component from the YAML
      # either the version for the component in this CCV is set
      # or it is set globally
      # never touch non-mentioned components
      if @yaml[:ccv].is_a?(Hash) and @yaml[:ccv].has_key?(ccv['label']) and @yaml[:ccv][ccv['label']].has_key?(component['content_view']['label'])
        desired_version = @yaml[:ccv][ccv['label']][component['content_view']['label']]
      elsif @yaml[:cv].is_a?(Hash) and @yaml[:cv].has_key?(component['content_view']['label'])
        desired_version = @yaml[:cv][component['content_view']['label']]
      else
        desired_version = component['version']
      end

      # instead of hard-coding the versions, the user can also specify "latest"
      if desired_version == 'latest'
        cvversions = api.resource(:content_view_versions).call(:index, {:content_view_id => component['content_view']['id']})
        desired_version = cvversions['results'][0]['version']
      end

      # if the version of the component does not match the one the user requested update it
      if component['version'].to_s != desired_version.to_s
        puts "  Updating from #{component['version']} to #{desired_version}"
        oldids = ids.dup
        ids.delete(component['id'])
        cvversions = api.resource(:content_view_versions).call(:index, {:content_view_id => component['content_view']['id'], :version => desired_version})
        desired_version_id = cvversions['results'][0]['id']
        ids.push(desired_version_id)
        puts "  Old components: #{oldids}"
        puts "  New components: #{ids}"
        # do the update
        was_updated = true
      end
    end

    if was_updated
      #Change the member content view versions; We do this once at the end, so if there was multiple CV changes, its only one call
      puts " Committing new content view versions"
      if not @options[:noop]
        api.resource(:content_views).call(:update, {:id => ccv['id'], :component_ids => ids })
      else
        puts "[noop] updating CCV #{ccv['id']} to #{ids}"
      end
      puts " Publishing new version as CV had changes"
      # do the publish
      if not @options[:noop]
        api.resource(:content_views).call(:publish, {:id => ccv['id'], :description => "automatic update"})
      else
        puts "[noop] publishing CV #{ccv['id']}"
      end
    end
  end

end

def promote()
  api = ApipieBindings::API.new({:uri => @options[:uri], :username => @options[:user], :password => @options[:pass], :api_version => '2', :timeout => @options[:timeout]})

  ccvs = []
  req = api.resource(:content_views).call(:index, {:organization_id => @options[:org], :full_results => true})
  ccvs.concat(req['results'])
  while (req['results'].length == req['per_page'].to_i)
    req = api.resource(:content_views).call(:index, {:organization_id => @options[:org], :full_results => true, :per_page => req['per_page'], :page => req['page'].to_i+1})
    ccvs.concat(req['results'])
  end

  ccvs.each do |ccv|
    next if ! ccv['composite']

    puts ccv['name']

    latest_version = ccv['versions'].sort_by { |v| v['version'].to_f }.reverse[0]

    if not latest_version['environment_ids'].index(@options[:lifecycle])
      if not @options[:noop]
        api.resource(:content_view_versions).call(:promote, {:id => latest_version['id'], :environment_id => @options[:lifecycle]})
      else
        puts "[noop] Promoting #{latest_version['id']} to lifecycle-environment #{@options[:lifecycle]}"
      end
    end
  end
end

action = ARGV.shift

if action == 'clean'
  clean
elsif action == 'update'
  update
elsif action == 'promote'
  promote
end
